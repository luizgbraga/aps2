import { RefObject, useEffect, useRef, useState } from 'react';
import { mapController } from './mapController';
import { TripsModel } from '../api/trip';
import { ShapesModel } from '../api/shape';
import { TripDTO } from '../api/trip';
import { RouteModel } from '../api/route';
import { useAsync } from '../utils/async';
import { OccurrenceModel } from '../api/occurrences';
import { SensorModel } from '../api/sensor';

// const coord = [
//   [-22.93186, -43.239560000000004],
//   [-22.931590000000003, -43.23903000000001],
//   [-22.931420000000003, -43.23875],
//   [-22.93092, -43.23819],
//   [-22.930560000000003, -43.237840000000006],
//   [-22.93015, -43.237480000000005],
//   [-22.92988, -43.237320000000004],
//   [-22.92977, -43.23724000000001],
//   [-22.928790000000003, -43.23666],
//   [-22.92792, -43.236180000000004],
//   [-22.9264, -43.23519],
//   [-22.926240000000004, -43.23508],
//   [-22.92594, -43.23487],
//   [-22.92575, -43.234700000000004],
//   [-22.92566, -43.23461],
//   [-22.925400000000003, -43.234320000000004],
//   [-22.925150000000002, -43.233990000000006],
//   [-22.92488, -43.2336],
//   [-22.924760000000003, -43.233430000000006],
//   [-22.924300000000002, -43.23279],
//   [-22.924080000000004, -43.232470000000006],
//   [-22.92378, -43.232040000000005],
//   [-22.92332, -43.231390000000005],
//   [-22.92329, -43.231280000000005],
//   [-22.92329, -43.23089],
//   [-22.9233, -43.230380000000004],
//   [-22.923370000000002, -43.23008],
//   [-22.923430000000003, -43.22992000000001],
//   [-22.92358, -43.22952],
//   [-22.923710000000003, -43.22914],
//   [-22.92394, -43.22851],
//   [-22.92414, -43.228030000000004],
//   [-22.924380000000003, -43.22744],
//   [-22.924690000000002, -43.2267],
//   [-22.924740000000003, -43.22659],
//   [-22.925050000000002, -43.22583],
//   [-22.92509, -43.225550000000005],
//   [-22.92508, -43.225170000000006],
//   [-22.925050000000002, -43.225080000000005],
//   [-22.925040000000003, -43.225010000000005],
//   [-22.924950000000003, -43.22482],
//   [-22.924830000000004, -43.2246],
//   [-22.92463, -43.22433],
//   [-22.92441, -43.224070000000005],
//   [-22.923650000000002, -43.22325],
//   [-22.92357, -43.22317],
//   [-22.92294, -43.222530000000006],
//   [-22.922860000000004, -43.22243],
//   [-22.92229, -43.22175],
//   [-22.921940000000003, -43.221360000000004],
//   [-22.92182, -43.221180000000004],
//   [-22.92169, -43.220890000000004],
//   [-22.9216, -43.22064],
//   [-22.92154, -43.220420000000004],
//   [-22.921490000000002, -43.220220000000005],
//   [-22.921370000000003, -43.219750000000005],
//   [-22.921310000000002, -43.21956],
//   [-22.921110000000002, -43.21882],
//   [-22.92068, -43.21737],
//   [-22.920360000000002, -43.216620000000006],
//   [-22.920260000000003, -43.216370000000005],
//   [-22.920050000000003, -43.215860000000006],
//   [-22.919870000000003, -43.215390000000006],
//   [-22.91974, -43.215120000000006],
//   [-22.919240000000002, -43.21408],
//   [-22.91907, -43.21374],
//   [-22.918940000000003, -43.21349],
//   [-22.9189, -43.21343],
//   [-22.918290000000002, -43.212450000000004],
//   [-22.91804, -43.212050000000005],
//   [-22.917900000000003, -43.21182],
//   [-22.91766, -43.211450000000006],
//   [-22.9171, -43.21058],
//   [-22.91685, -43.21018],
//   [-22.91673, -43.209970000000006],
//   [-22.916610000000002, -43.20975000000001],
//   [-22.916410000000003, -43.209430000000005],
//   [-22.91618, -43.20908],
//   [-22.91609, -43.20890000000001],
//   [-22.915650000000003, -43.20825000000001],
//   [-22.91516, -43.207510000000006],
//   [-22.915000000000003, -43.20725],
//   [-22.91477, -43.20687],
//   [-22.91465, -43.2066],
//   [-22.91437, -43.20555],
//   [-22.914230000000003, -43.20494],
//   [-22.91422, -43.2049],
//   [-22.914170000000002, -43.204750000000004],
//   [-22.913970000000003, -43.204240000000006],
//   [-22.913890000000002, -43.20411],
//   [-22.91382, -43.20403],
//   [-22.913770000000003, -43.204],
//   [-22.913580000000003, -43.20375000000001],
//   [-22.913300000000003, -43.2034],
//   [-22.913240000000002, -43.203230000000005],
//   [-22.913220000000003, -43.20306],
//   [-22.913210000000003, -43.202960000000004],
//   [-22.913240000000002, -43.202560000000005],
//   [-22.913670000000003, -43.20131000000001],
//   [-22.913770000000003, -43.20103],
//   [-22.91384, -43.200860000000006],
//   [-22.914260000000002, -43.199760000000005],
//   [-22.914330000000003, -43.19944],
//   [-22.9144, -43.19908],
//   [-22.914420000000003, -43.19895],
//   [-22.914510000000003, -43.19847],
//   [-22.914510000000003, -43.19827],
//   [-22.91447, -43.197970000000005],
//   [-22.91447, -43.197860000000006],
//   [-22.91431, -43.197070000000004],
//   [-22.914230000000003, -43.196720000000006],
//   [-22.914150000000003, -43.19615],
//   [-22.914060000000003, -43.195690000000006],
//   [-22.914050000000003, -43.19556],
//   [-22.914170000000002, -43.19529000000001],
//   [-22.91421, -43.19523],
//   [-22.91428, -43.195190000000004],
//   [-22.915290000000002, -43.194790000000005],
//   [-22.91542, -43.19473000000001],
//   [-22.916010000000004, -43.19449],
//   [-22.916140000000002, -43.19446000000001],
//   [-22.916330000000002, -43.194430000000004],
//   [-22.91654, -43.19442],
//   [-22.91682, -43.19444],
//   [-22.918190000000003, -43.19462],
//   [-22.91841, -43.19462],
//   [-22.91869, -43.1946],
//   [-22.91907, -43.194570000000006],
//   [-22.919520000000002, -43.19447],
//   [-22.91976, -43.19438],
//   [-22.919900000000002, -43.194320000000005],
//   [-22.92019, -43.194140000000004],
//   [-22.9205, -43.193900000000006],
//   [-22.93025, -43.186420000000005],
//   [-22.93052, -43.18623],
//   [-22.93109, -43.185810000000004],
//   [-22.931310000000003, -43.18564000000001],
//   [-22.931610000000003, -43.18549],
//   [-22.93306, -43.184810000000006],
//   [-22.93333, -43.18471],
//   [-22.934970000000003, -43.1843],
//   [-22.93514, -43.184270000000005],
//   [-22.93579, -43.184050000000006],
//   [-22.93693, -43.18376000000001],
//   [-22.93699, -43.18374],
//   [-22.937150000000003, -43.183710000000005],
//   [-22.937700000000003, -43.18357],
//   [-22.937910000000002, -43.1835],
//   [-22.93906, -43.18321],
//   [-22.939490000000003, -43.18309000000001],
//   [-22.939750000000004, -43.18300000000001],
//   [-22.94031, -43.18283],
//   [-22.940640000000002, -43.18276],
//   [-22.940820000000002, -43.18271],
//   [-22.941110000000002, -43.182590000000005],
//   [-22.94177, -43.18234],
//   [-22.941910000000004, -43.18231],
//   [-22.942030000000003, -43.18233],
//   [-22.942100000000003, -43.182370000000006],
//   [-22.94237, -43.182640000000006],
//   [-22.94274, -43.183040000000005],
//   [-22.9431, -43.1833],
//   [-22.94366, -43.18365],
//   [-22.94386, -43.183730000000004],
//   [-22.944070000000004, -43.18227],
//   [-22.94413, -43.1822],
//   [-22.944200000000002, -43.182170000000006],
//   [-22.944450000000003, -43.1822],
//   [-22.94526, -43.182410000000004],
//   [-22.945580000000003, -43.18247],
//   [-22.94601, -43.182550000000006],
//   [-22.94665, -43.18258],
//   [-22.946930000000002, -43.18258],
//   [-22.947680000000002, -43.182500000000005],
//   [-22.947960000000002, -43.182430000000004],
//   [-22.948300000000003, -43.18235000000001],
//   [-22.94847, -43.18235000000001],
//   [-22.948670000000003, -43.18229],
//   [-22.949260000000002, -43.182050000000004],
//   [-22.95003, -43.18175],
//   [-22.95005, -43.18173],
//   [-22.95006, -43.181670000000004],
//   [-22.95004, -43.181580000000004],
//   [-22.950010000000002, -43.181540000000005],
//   [-22.94994, -43.181520000000006],
//   [-22.94959, -43.18162],
//   [-22.949360000000002, -43.18164],
//   [-22.949250000000003, -43.18168],
//   [-22.94875, -43.18187],
//   [-22.948330000000002, -43.182],
//   [-22.94779, -43.182140000000004],
//   [-22.94771, -43.18215],
//   [-22.94762, -43.18204],
//   [-22.94759, -43.18193],
//   [-22.94761, -43.1818],
//   [-22.94772, -43.181630000000006],
//   [-22.94807, -43.181450000000005],
//   [-22.94864, -43.181050000000006],
//   [-22.948990000000002, -43.18084],
//   [-22.949510000000004, -43.180580000000006],
//   [-22.950010000000002, -43.18029000000001],
//   [-22.950400000000002, -43.180130000000005],
//   [-22.95069, -43.17998],
//   [-22.951330000000002, -43.17971],
//   [-22.95304, -43.179030000000004],
//   [-22.95343, -43.17889],
//   [-22.953830000000004, -43.178740000000005],
//   [-22.954960000000003, -43.17828],
//   [-22.95566, -43.17793],
//   [-22.95586, -43.17785000000001],
//   [-22.956090000000003, -43.17779],
//   [-22.95624, -43.17774],
//   [-22.95643, -43.1777],
//   [-22.95699, -43.177820000000004],
//   [-22.958090000000002, -43.17775],
//   [-22.958240000000004, -43.17774],
//   [-22.958370000000002, -43.177710000000005],
//   [-22.95889, -43.177440000000004],
//   [-22.958990000000004, -43.17736],
//   [-22.959010000000003, -43.177310000000006],
//   [-22.959010000000003, -43.17725],
//   [-22.959000000000003, -43.17716],
//   [-22.958740000000002, -43.176640000000006],
//   [-22.958640000000003, -43.176500000000004],
//   [-22.95832, -43.176370000000006],
//   [-22.958080000000002, -43.17602],
//   [-22.95801, -43.17591],
//   [-22.957870000000003, -43.17575],
//   [-22.957800000000002, -43.17569],
//   [-22.957320000000003, -43.17535],
//   [-22.95726, -43.17535],
//   [-22.957220000000003, -43.17537],
//   [-22.95718, -43.175450000000005],
//   [-22.957160000000002, -43.17550000000001],
//   [-22.957160000000002, -43.175560000000004],
//   [-22.95726, -43.17566],
//   [-22.95736, -43.17578],
//   [-22.957710000000002, -43.17604],
//   [-22.957620000000002, -43.176280000000006],
//   [-22.957510000000003, -43.17644000000001],
//   [-22.957410000000003, -43.17662000000001],
//   [-22.957420000000003, -43.176660000000005],
//   [-22.957020000000004, -43.17674],
//   [-22.956970000000002, -43.176790000000004],
//   [-22.956970000000002, -43.17683],
// ];

const coord = [
  [-43.239564, -22.931858],
  [-43.239026, -22.931588],
  [-43.238752, -22.931418],
  [-43.238186, -22.93092],
  [-43.237837, -22.930561],
  [-43.237482, -22.930154],
  [-43.237318, -22.92988],
  [-43.237241, -22.929773],
  [-43.236664, -22.92879],
  [-43.236182, -22.927922],
  [-43.235187, -22.926401],
  [-43.235084, -22.926242],
  [-43.234866, -22.925938],
  [-43.234701, -22.925747],
  [-43.234606, -22.92566],
  [-43.23432, -22.925404],
  [-43.233989, -22.925151],
  [-43.233605, -22.924884],
  [-43.23343, -22.924759],
  [-43.232793, -22.924305],
  [-43.232473, -22.924081],
  [-43.232035, -22.923776],
  [-43.231389, -22.923319],
  [-43.231284, -22.923295],
  [-43.230888, -22.923293],
  [-43.230375, -22.923304],
  [-43.230082, -22.923374],
  [-43.229922, -22.923432],
  [-43.229523, -22.923579],
  [-43.229139, -22.923711],
  [-43.22851, -22.92394],
  [-43.228027, -22.924139],
  [-43.227439, -22.924381],
  [-43.226701, -22.924691],
  [-43.226588, -22.924742],
  [-43.225828, -22.925051],
  [-43.225554, -22.925095],
  [-43.225173, -22.925076],
  [-43.225084, -22.925055],
  [-43.225008, -22.925036],
  [-43.224816, -22.924949],
  [-43.224603, -22.924831],
  [-43.224335, -22.924625],
  [-43.22407, -22.924408],
  [-43.223254, -22.923649],
  [-43.223174, -22.923569],
  [-43.222525, -22.922937],
  [-43.222433, -22.92286],
  [-43.221751, -22.922285],
  [-43.221359, -22.921943],
  [-43.221181, -22.921815],
  [-43.220886, -22.921692],
  [-43.220638, -22.921604],
  [-43.220423, -22.92154],
  [-43.220224, -22.921486],
  [-43.219751, -22.921367],
  [-43.219559, -22.921315],
  [-43.218821, -22.921114],
  [-43.217366, -22.920684],
  [-43.216624, -22.920362],
  [-43.216369, -22.920263],
  [-43.215859, -22.92005],
  [-43.215389, -22.919867],
  [-43.214752, -22.92179],
  [-43.214685, -22.92193],
  [-43.214503, -22.922118],
  [-43.213676, -22.922933],
  [-43.213199, -22.923411],
  [-43.212776, -22.923789],
  [-43.212527, -22.924001],
  [-43.211667, -22.92475],
  [-43.211472, -22.924912],
  [-43.211459, -22.924925],
  [-43.211377, -22.924961],
  [-43.21124, -22.924973],
  [-43.209724, -22.924788],
  [-43.209641, -22.92586],
  [-43.209588, -22.926905],
  [-43.209564, -22.927493],
  [-43.20947, -22.928528],
  [-43.209424, -22.92877],
  [-43.209299, -22.929203],
  [-43.20925, -22.929382],
  [-43.208917, -22.930596],
  [-43.208888, -22.930939],
  [-43.20892, -22.931077],
  [-43.20901, -22.931268],
  [-43.20943, -22.931952],
  [-43.209487, -22.932037],
  [-43.20961, -22.932244],
  [-43.209771, -22.932615],
  [-43.209852, -22.932938],
  [-43.210003, -22.933743],
  [-43.210061, -22.933996],
  [-43.210033, -22.934223],
  [-43.209973, -22.934405],
  [-43.209818, -22.934616],
  [-43.209651, -22.934887],
  [-43.209579, -22.934978],
  [-43.209287, -22.935329],
  [-43.208789, -22.935773],
  [-43.208145, -22.936164],
  [-43.206654, -22.93687],
  [-43.205205, -22.937601],
  [-43.204004, -22.938169],
  [-43.203644, -22.938362],
  [-43.203344, -22.93855],
  [-43.202979, -22.938852],
  [-43.202638, -22.939368],
  [-43.20255, -22.939564],
  [-43.202509, -22.939666],
  [-43.202477, -22.939818],
  [-43.202418, -22.940034],
  [-43.202377, -22.940454],
  [-43.202379, -22.940737],
  [-43.202396, -22.941592],
  [-43.204571, -22.95854],
  [-43.20451, -22.959065],
  [-43.204429, -22.959868],
  [-43.204447, -22.960064],
  [-43.204513, -22.960168],
  [-43.204724, -22.960306],
  [-43.204945, -22.960395],
  [-43.204512, -22.960324],
  [-43.204298, -22.960324],
  [-43.203766, -22.960366],
  [-43.203213, -22.960341],
  [-43.203116, -22.960323],
  [-43.202986, -22.960302],
  [-43.202545, -22.960166],
  [-43.202122, -22.95995],
  [-43.201018, -22.959462],
  [-43.200304, -22.959134],
  [-43.200201, -22.959075],
  [-43.200062, -22.958967],
  [-43.19995, -22.958922],
  [-43.199866, -22.958909],
  [-43.199756, -22.958909],
  [-43.199601, -22.958933],
  [-43.199241, -22.958877],
  [-43.198568, -22.958671],
  [-43.197451, -22.958403],
  [-43.197358, -22.958388],
  [-43.197281, -22.958402],
  [-43.197005, -22.95851],
  [-43.196727, -22.958662],
  [-43.196501, -22.958737],
  [-43.196154, -22.958729],
  [-43.194966, -22.95855],
  [-43.19412, -22.958426],
  [-43.192324, -22.958159],
  [-43.19192, -22.958087],
  [-43.191725, -22.958087],
  [-43.191434, -22.958095],
  [-43.191175, -22.958045],
  [-43.190892, -22.957953],
  [-43.189242, -22.957406],
  [-43.188726, -22.957224],
  [-43.188671, -22.957205],
  [-43.188112, -22.957006],
  [-43.187692, -22.956862],
  [-43.187307, -22.956729],
  [-43.187225, -22.956703],
  [-43.186542, -22.956469],
  [-43.186029, -22.956291],
  [-43.185255, -22.956058],
  [-43.184961, -22.956064],
  [-43.184067, -22.955674],
  [-43.18315, -22.955292],
  [-43.183125, -22.95528],
  [-43.18237, -22.954956],
  [-43.181751, -22.954688],
  [-43.18123, -22.954456],
  [-43.181141, -22.954385],
  [-43.181074, -22.954463],
  [-43.180351, -22.955847],
  [-43.180262, -22.955851],
  [-43.179928, -22.955783],
  [-43.178465, -22.955685],
  [-43.178342, -22.955688],
  [-43.178178, -22.955721],
  [-43.177995, -22.95583],
  [-43.177788, -22.956087],
  [-43.177735, -22.956242],
  [-43.177703, -22.956429],
  [-43.177817, -22.956988],
  [-43.177753, -22.958086],
  [-43.177739, -22.958241],
  [-43.177706, -22.958373],
  [-43.177438, -22.958894],
  [-43.17736, -22.958986],
  [-43.17731, -22.95901],
  [-43.17725, -22.959014],
  [-43.177164, -22.958997],
  [-43.17664, -22.95874],
  [-43.176499, -22.958639],
  [-43.176371, -22.958316],
  [-43.176019, -22.958085],
  [-43.175911, -22.958006],
  [-43.175746, -22.957871],
  [-43.175686, -22.957799],
  [-43.175355, -22.957316],
  [-43.175351, -22.957264],
  [-43.17537, -22.957223],
  [-43.175448, -22.95718],
  [-43.175499, -22.957161],
  [-43.175562, -22.957163],
  [-43.175662, -22.957259],
  [-43.175777, -22.957357],
  [-43.176037, -22.957708],
  [-43.176282, -22.957616],
  [-43.176436, -22.957512],
  [-43.176623, -22.95741],
  [-43.176662, -22.957421],
  [-43.176743, -22.957016],
  [-43.176792, -22.95697],
  [-43.176829, -22.956967],
];

const encodedPolyline =
  'b{}jCff|fGu@iBa@w@cBoBgAeAqAgAu@_@UOcEsBmD_BoHeE_@U{@i@e@a@QQs@y@q@aAu@mAWa@{A_Ck@_A{@uA{AaCEU?mA@eBL{@J_@\\oAXkAl@}Bf@_Bn@uB|@sCHU|@wCFw@AkAEQAMQe@Wk@g@u@k@s@wCcDOO}B_COSqBgCeAmAWc@Yy@Qq@Kk@Ig@W}AKe@g@sCuAaH_AuCSq@i@eBc@}AYu@cBoEa@cAYq@GKyBcEq@oA[m@o@iAoBmDq@oAWi@Wk@g@_Am@eAQc@wAaCaBsC_@s@m@kAWu@w@qE[yBAGI]g@eBOYMOIEe@q@w@eAKa@Ca@ASDoAtAyFRw@La@rA{EL_ALgABYP_B?g@G{@?U_@}COeAOqBQ{AAYVu@FKLGhEoAXKtBo@XEd@Eh@Av@BpGb@j@?v@CjAExASn@QZKx@c@|@o@|{@wm@t@e@pBsAj@a@z@]`HgCt@SfIqA`@E`Ck@bFy@JC^ElB[h@MdFy@tAWr@QnBa@`AMb@Ix@WbCq@ZEVBLFt@t@hAnAfAr@nBdAf@Nh@cHJMLEp@D`Dh@~@JtAN~BDv@?tCOv@MbAO`@?f@KtBo@xC{@BC@KCQEGMCeARm@BUFcBd@sAXkBZO@QUEUBYTa@dAc@pBoAdAi@fBs@bBy@lA_@x@]~Bu@tIgClA[nA]`F{AjCeAf@Ol@K\\Id@GnBVzEM\\AXEfBu@ROBI?KAQs@gBS[_AYo@eAMU[_@MK_BcAK?GBGNCH?JRRRVdAr@Qn@U^Sb@@FoANIH?F';

function decodePolyline(encoded: any) {
  let index = 0;
  const len = encoded.length;
  let lat = 0;
  let lng = 0;
  const coordinates = [];

  while (index < len) {
    let b;
    let shift = 0;
    let result = 0;
    do {
      b = encoded.charCodeAt(index++) - 63;
      result |= (b & 0x1f) << shift;
      shift += 5;
    } while (b >= 0x20);
    const dlat = (result & 1) != 0 ? ~(result >> 1) : result >> 1;
    lat += dlat;
    shift = 0;
    result = 0;
    do {
      b = encoded.charCodeAt(index++) - 63;
      result |= (b & 0x1f) << shift;
      shift += 5;
    } while (b >= 0x20);
    const dlng = (result & 1) != 0 ? ~(result >> 1) : result >> 1;
    lng += dlng;

    coordinates.push([lat * 1e-5, lng * 1e-5]);
  }

  return coordinates;
}

const testpath = [
  {
    route_id: 'cock',
    shape: coord.map((element) => {
      return { lat: element[1], lng: element[0] };
    }),
    inactive: false,
    color: '#000000',
    text_color: '#000000',
  },
];

async function fetchTrips(targetRouteId: string[]) {
  const allTrips = await TripsModel.getAllTrips();
  const allRoutes = await RouteModel.getAllRoutes();
  const filteredTrips = allTrips.filter((trip) =>
    targetRouteId.includes(trip.route_id)
  );
  return filteredTrips.map((trip) => {
    let color = '';
    let text_color = '';
    let inactive = false;
    const route = allRoutes.find((x) => x.id === trip.route_id);
    if (route) {
      inactive = route.inactive;
      color = '#' + route.color;
      if (route.text_color) text_color = route.text_color;
    }
    return {
      route_id: route?.id,
      trip: trip,
      inactive: inactive,
      color: color,
      text_color: text_color,
    };
  });
}

async function fetchTripsShapes(
  trips: {
    route_id: string | undefined;
    trip: TripDTO;
    inactive: boolean;
    color: string;
    text_color: string;
  }[]
) {
  const shapePromises = trips.map(async (element) => {
    const shape = await ShapesModel.getShape(element.trip.id);
    return {
      route_id: element.route_id,
      shape: shape,
      inactive: element.inactive,
      color: element.color,
      text_color: element.text_color,
    };
  });
  const shapesObject = await Promise.all(shapePromises);
  const mappedShapes = shapesObject.map((shapeObject) => {
    return {
      route_id: shapeObject.route_id,
      shape: shapeObject.shape.map((shape) => {
        return { lat: shape.pt_lat, lng: shape.pt_lon };
      }),
      inactive: shapeObject.inactive,
      color: shapeObject.color,
      text_color: shapeObject.color,
    };
  });
  return mappedShapes;
}

let allRoutes: any;
let allTrips:any;
async function loadRoutes(){
  let routeRes = await RouteModel.getAllRoutes()
  let tripRes = await TripsModel.getAllTrips()
  allRoutes = routeRes;
  allTrips = tripRes;
}

export const useMap = (
  ref: RefObject<HTMLDivElement | null>,
  pinnable: boolean,
  admin?: boolean
) => {
  const {
    setup,
    setLocationToCurrent,
    addRecentralizeButton,
    drawPaths,
    addMarker,
    clearPaths,
  } = mapController();
  const [map, setMap] = useState<google.maps.Map | null>(null);
  const [paths, setPaths] = useState<
    {
      route_id: string | undefined;
      shape: { lat: number; lng: number }[];
      inactive: boolean;
      color: string;
      text_color: string;
    }[]
  >([]);
  const [routeIds, setRouteIds] = useState<string[]>([]);
  const [routeIdsToDraw, setRouteIdsToDraw] = useState<string[]>([]);
  const [polylines, setPolylines] = useState<
    { route_id: string; polyline: google.maps.Polyline }[]
  >([]);
  const prevMarkersRef = useRef([] as google.maps.Marker[]);
  const { result: allOccurrences } = useAsync(() => OccurrenceModel.all());
  const { result: allSensors } = useAsync(() => SensorModel.list());

  loadRoutes();
  map?.addListener('click', (e: any) => {
    if (!pinnable) return;
    const m = addMarker(
      map,
      { lat: e.latLng.lat(), lng: e.latLng.lng() },
      true
    );
    clearMarkers(prevMarkersRef.current);
    if (m) prevMarkersRef.current.push(m);
  });

  useEffect(() => {
    if (ref.current && !map) setMap(setup(ref.current));
    if (!map) return;
    if (prevMarkersRef.current.length && pinnable) return;
    setLocationToCurrent(map);
    addRecentralizeButton(map);
    if (allOccurrences && !pinnable) {
      allOccurrences.forEach((occurrence) => {
        const m = addMarker(map, {
          lat: parseFloat(occurrence.latitude),
          lng: parseFloat(occurrence.longitude),
        });
        if (m) prevMarkersRef.current.push(m);
      });
    }
  }, [
    map,
    ref,
    pinnable,
    allOccurrences,
    setup,
    setLocationToCurrent,
    addRecentralizeButton,
    addMarker,
  ]);

  function clearMarkers(markers: google.maps.Marker[]) {
    for (const m of markers) m.setMap(null);
  }

  // changeRouteIds is called when the user updates the filter. It (and the following useEffects) draws the newly selected lines and removes any that were removed
  const changeRouteIds = (newRouteIds: string[]) => {
    const addedRoutes = newRouteIds.filter(
      (route) => !routeIds.includes(route)
    );
    const removedRoutes = routeIds.filter(
      (route) => !newRouteIds.includes(route)
    );
    const polylinesToRemove = polylines.filter((polyline) =>
      removedRoutes.includes(polyline.route_id)
    );
    setRouteIds(newRouteIds);
    setRouteIdsToDraw(addedRoutes);
    clearPaths(polylinesToRemove);
  };

  useEffect(() => {
    const fetchTripsAndShapes = async () => {
      const trips = await fetchTrips(routeIdsToDraw);
      const paths = await fetchTripsShapes(trips);
      setPaths(paths);
    };
    fetchTripsAndShapes();
    // if (map) drawPaths(map, testpath, setPolylines);
  }, [routeIdsToDraw]);

  useEffect(() => {
    if (map && paths) drawPaths(map, paths, setPolylines);
  }, [paths]);
  return {
    map,
    changeRouteIds,
    routeIds,
    prevMarkersRef,
  };
};
